seq(along.with=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(0:2,times=10)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect[num_vect<1]
tf<-num_vect<1
tf
num_vect>=6
my_char<-c("My","name","is")
my_char
paste(my_char, collapse = " ")
my_name<-c(my_char,"Frodo")
my_name
paste(my_name, collapse=" ")
paste("hello", "world", sep=" ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X","Y","Z", sep=""))
paste(1:3, c("X","Y","Z"), sep="")
paste(LETTERS,1:4,sep="-")
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<x[!is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11,bar=2,norf=NA)
c
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","nerf")
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix()
?matrix
my_matrix2<-matrix(c(1:20),4,5)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(my_data)
colnames(my_data)<-cnames
my_data
TRUE==TRUE
(FLASE==TRUE)==FALSE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE&&c(TRUE,FALSE,FALSE)
TRUE|c(TRUE,FALSE,FALSE)
TRUE||c(TRUE,FALSE,FALSE)
5>8||6!=8 && 4>3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints<-sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function("My first function!")
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
reminder(divisor=11,num=5)
remainder(divisor=11,num=5)
remainder(4,div = 2)
args(remainder)
submit()
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){return (x[1])},c(8,4,0))
evaluate(function(x){return (x[length(x)])},c(8,4,0))
?paste
paste("Programming","is","fun!")
submit()
telegram("good morning!")
submit()
my_libs(place="chicago",adjecive="foo",noun="book")
mad_libs(place="chicago",adjecive="foo",noun="book")
submit()
'I %p% love %p% R!'
''I'' %p% 'love' %p% 'R!''
I %p% love %p% R!
'I' %p% 'love' %p% 'R!'
head(flags)
dim(flags)
viewinfo(flags)
viewinfo
class(flags)
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
<-cls_vect<-sapply(flags, class())
cls_vect<-sapply(flags, class())
cls_vect<-sapply(class(flags))
cls_vect<-sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors<-flags[,11:17]
head(flag_colors)
class(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flag_colors,range)
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals<-lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem) elem[2])
swirl()
num_vect<-c(0.5,55,10,6)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect>=6
my_char<-c("My","name","is")
my_char
paste(my_char,collapse = " ")
my_name<-c(my_char,"Luke")
my_name
passte(my_name,collapse=" ")
paste(my_name,collapse=" ")
paste("Hello","world!", sep=" ")
paste(1:3, c("X","Y","Z"), sep="")
paste(LETTERS,1:4, sep="-")
swirl()
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y<-x[!is.na(x)]
y
7[y>0]
y[y>0]
x
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector<-1:20
my_vector
dim(my_vecttor)
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
my_vector
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix2<-matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames<-c("patient","age","weight","bp","rating","test")
my_dat.colnames(cnames)
my_data.colnames(cnames)
colnames(my_data)<-cnames
my_data
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags,class)
cls_vect<-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flags_colors<-flags[,11:17]
flag_colors<-flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
clasS(shape_mat)
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals<-lapply(flags,unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,length)
sapply(flags,unique)
lapply(unique_vals,function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table)flags$landmass)
table(flags$landmass)
table(flag$animate)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmasses,summary)
tapply(flags$population,flags$landmass,summary)
bye
exit
quit
quit()
library(datasets)
data(iris)
?iris
head(iris)
class(iris)
iris$Sepal.Length
iris$Species
iris$Species["setosa"]
iris$Species[setosa]
iris$Species[["setosa"]]
iris$Species.setosa
iris$Species=="setosa"
iris$Species=="virginica"
iris[iris$Species=="virginica"]
iris[[iris$Species=="virginica"]]
temp<-iris$Species=="virginica"
temp
iris[temp]
iris[[temp]
]
tapply(iris,iris$Species,mean)
table(iris,iris$Sepal.Length)
table(iris,iris$Species)
iris
rapply(iris,class)
iris$Species
iris$Species==virginica
iris$Species=="virginica"
temp<-iris$Species=="virginica"
temp
iris[temp]
swirl()
skip
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
temp
iris
rapply(iris,iris@Sepal.lenght,mean)
iris$Sepal.Length
mean(iris$Sepal.Length)
colMeans(iris)
colMeans(iris$Sepal.Length)
swirl()
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)&x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
temp
apply(iris,class)
lapply(iris,class)
iris$Species[temp]
iris$Species[iris$Species=="virginica]
]
]
iris$Species[iris$Species=="virginica"]
lapply(iris,iris$Species[iris$Species=="virginica"])
iris[iris$Species=="virginica"]
iris
iris[iris$Sepal.Length]
iris$Sepal.Length
iris["Sepal.lenght"]
iris("Sepal.lenght")
iris("Sepal.Lenght")
iris$Sepal.Length
iris$Sepal.Length[1]
iris$Sepal.Length[iris$Species=="virginica"]
mean(iris$Sepal.Length[iris$Species=="virginica"])
iris[,1:4]
mean(iris[,1])
mean(iris[,2])
mean(iris[,3])
mean(iris[,4])
apply(iris[,1:4],2,mean)
colMeans(iris[, 1:4])
Means(iris[, 1:4])
library)(datasets)
library(datasets)
data(mtcards)
data(mtcars)
?mtcars
table(mtcars,mpg)
table(mtcars,mtcars$mpg)
mtcars$mpg
table(mtcads$mpg,mtcars$cyl)
table(mtcars$mpg,mtcars$cyl)
mtcars
sapply(mtcars, cyl, mean)
split(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
avg_mpg_by_cyl<-sapply(split(mtcars$mpg, mtcars$cyl), mean)
abs(avg_mpg_by_cyl$4 - avg_mpg_by_cyl$6)
avg_mpg_by_cyl
avg_mpg_by_cyl[1]
avg_mpg_by_cyl$4
avg_mpg_by_cyl["4"]
class(avg_mpg_by_cyl)
avg_mpg_by_cyl["4"]
abs(avg_mpg_by_cyl["4"] - avg_mpg_by_cyl["6"])
26.66364-19.74286
abs(avg_mpg_by_cyl["4"] - avg_mpg_by_cyl["8"])
debug(ls)
ls
ls
dir
exit
quit
exit
ls
?ls
ls
getwd()
setwd("c:/training")
setwd("c:/training/coursera/datacleaning")
setwd("c:/training/coursera/datacleaning/project/getdata-projectfiles-UCI HAR Dataset/UCI HAR Dataset")
source(run_analysis.R)
source(run_analysis)
install.packages("dplyr")
install.packages("gdata")
library(dplyr)
library(gdata) #to use write.fwf
#/UCI HAR Dataset/ Read activity_labels.txt.
activity_labels <- read.table("activity_labels.txt", sep="", header=FALSE, stringsAsFactors=FALSE, na.strings = "NA", col.names = c("activity.num","activity"))
#/UCI HAR Dataset/ Read features.txt. features.txt contains the column names for the data sets for 'test' and 'train'
features <- read.table("features.txt", sep="", header=FALSE, stringsAsFactors=FALSE, na.strings = "NA", col.names = c("","column.names"))
#The second column holds the column names
features <- features[,2]
#Clean column names by replacing or removing undesirable characters
#Replace '-' and ',' with '.'
features <- gsub(pattern="-|,", replacement=".", features)
#Remove "()"
features <- gsub(pattern="\\(\\)", replacement="", features)
#Replace '(' with '.'
features <- gsub(pattern="\\(", replacement=".", features)
#Replace ')' with '.'
features <- gsub(pattern="\\)", replacement=".", features)
#Clean test data
#/test/: Read y_test.txt (this file contains activity as an integer)
y_test <- read.table("test/y_test.txt", sep="", header=FALSE, stringsAsFactors=FALSE, na.strings = "NA", col.names = c("activity.num"))
#/test/: Read subject_test.txt (this file contains list of subjects for the test data set)
subject_test <- read.table("test/subject_test.txt", sep="", header=FALSE, stringsAsFactors=FALSE, na.strings = "NA", col.names = c("subject.id"))
#/test/: Read X_test data and assign the column names from features
X_test <- read.table("test/X_test.txt", sep="", header=FALSE, stringsAsFactors=FALSE, na.strings = "NA", col.names = features)
#/test/: Add the subject.id to the X_test data set
X_test <- mutate(X_test, subject.id=subject_test$subject.id)
#/test/: Add the activity (as an integer value) to the X_test data set
X_test <- mutate(X_test, activity.num=y_test$activity.num)
#clean training data
#/train/: Read y_train.txt (this file contains activity as an integer)
y_train <- read.table("train/y_train.txt", sep="", header=FALSE, stringsAsFactors=FALSE, na.strings = "NA", col.names = c("activity.num"))
#/train/: Read subject_train.txt (this file contains list of subjects for the train data set)
subject_train <- read.table("train/subject_train.txt", sep="", header=FALSE, stringsAsFactors=FALSE, na.strings = "NA", col.names = c("subject.id"))
#/train/: Read X_train data and assign the column names from features
X_train <- read.table("train/X_train.txt", sep="", header=FALSE, stringsAsFactors=FALSE, na.strings = "NA", col.names = features)
#/train/: Add the subject.id to the X_train data set
X_train <- mutate(X_train, subject.id=subject_train$subject.id)
#/train/: Add the activity (as an integer value) to the X_train data set
X_train <- mutate(X_train, activity.num=y_train$activity.num)
#Combine test and cleaning data
dim(X_test)
dim(X_train)
X_merged <- rbind(X_test, X_train)
dim(X_merged)
#Select only the column names for mean,standard deviation, subject.id and activity.num
col_names_mean_std <- grep("mean|std|subject\\.id|activity\\.num", names(X_merged))
X_merged <- X_merged[,col_names_mean_std]
#Merge the X_merged data set with the activity_labels so that the activty label appears in the data set
X_merged <- merge(X_merged,activity_labels, by.x="activity.num", by.y="activity.num", all=TRUE, sort=FALSE)
#Move the "subject.id" column name to the front of the data frame followed by the "activity" column
X_merged  <- X_merged[,c(ncol(X_merged)-1, ncol(X_merged), 1:(ncol(X_merged)-2))]
#Remove the "activity.num" column
X_merged <- select(X_merged,-activity.num)
X_mereged_ordered_by_subjectid <- arrange(X_merged, subject.id)
X_mereged_ordered_by_subjectid <- as.data.frame(X_mereged_ordered_by_subjectid)
#Write X_merged data set to a file
#create a vector of 81 elements
col_width <- rep(18,81)
options( scipen = -10 ) #this option set so digits will be displayed in scientific format
#Write data
write.fwf(X_mereged_ordered_by_subjectid, file="mean_std_tidy_data.txt", append=FALSE, quote=FALSE, sep=" ", na="NA",rownames=FALSE, colnames=FALSE, justify="right", width=col_width, scientific=TRUE)
#Write column names
features_merged_tidy_data <- names(X_mereged_ordered_by_subjectid)
write.table(features_merged_tidy_data, file="features_mean_std_tidy_data.txt", append=FALSE, sep="\n", row.names = FALSE, col.names = FALSE, quote=FALSE)
#Group X_merged by Activity and Subject
X_merged_grouped <- group_by(X_merged, activity, subject.id)
#Get average of each variable(i.e. column) for each activity and subject.id
X_merged_grouped_summary <- summarize_each(X_merged_grouped,funs(mean))
X_merged_grouped_summary <- as.data.frame(X_merged_grouped_summary )
write.fwf(X_merged_grouped_summary, file="average_tidy_data.txt", append=FALSE, quote=FALSE, sep=" ", na="NA",rownames=FALSE, colnames=FALSE, justify="right", width=col_width, scientific=TRUE)
features_average_tidy_data <- names(X_merged_grouped_summary)
write.table(features_average_tidy_data, file="features_average_tidy_data.txt", append=FALSE, sep="\n", row.names = FALSE, col.names = FALSE, quote=FALSE)
